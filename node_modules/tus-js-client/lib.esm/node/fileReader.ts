// @ts-expect-error TS(7023): '_typeof' implicitly has return type 'any' because... Remove this comment to see the full error message
function _typeof(o: any) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o: any) { return typeof o; } : function (o: any) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _classCallCheck(instance: any, Constructor: any) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target: any, props: any) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor: any, protoProps: any, staticProps: any) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg: any) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input: any, hint: any) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
import { ReadStream } from 'fs';
// @ts-expect-error TS(1259): Module '"/Users/marius/workspace/tus/tus-js-client... Remove this comment to see the full error message
import isStream from 'is-stream';
import BufferSource from './sources/BufferSource.js';
import getFileSource from './sources/FileSource.js';
import StreamSource from './sources/StreamSource.js';
var FileReader = /*#__PURE__*/function () {
  function FileReader() {
    _classCallCheck(this, FileReader);
  }
  // @ts-expect-error TS(2554): Expected 3 arguments, but got 2.
  _createClass(FileReader, [{
    key: "openFile",
    value: function openFile(input: any, chunkSize: any) {
      if (Buffer.isBuffer(input)) {
        // @ts-expect-error TS(7009): 'new' expression, whose target lacks a construct s... Remove this comment to see the full error message
        return Promise.resolve(new BufferSource(input));
      }
      if (input instanceof ReadStream && input.path != null) {
        return getFileSource(input);
      }
      if (isStream.readable(input)) {
        chunkSize = Number(chunkSize);
        if (!Number.isFinite(chunkSize)) {
          return Promise.reject(new Error('cannot create source for stream without a finite value for the `chunkSize` option; specify a chunkSize to control the memory consumption'));
        }
        // @ts-expect-error TS(7009): 'new' expression, whose target lacks a construct s... Remove this comment to see the full error message
        return Promise.resolve(new StreamSource(input));
      }
      return Promise.reject(new Error('source object may only be an instance of Buffer or Readable in this environment'));
    }
  }]);
  return FileReader;
}();
export { FileReader as default };