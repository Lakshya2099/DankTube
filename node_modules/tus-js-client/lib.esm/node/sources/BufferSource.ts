// @ts-expect-error TS(7023): '_typeof' implicitly has return type 'any' because... Remove this comment to see the full error message
function _typeof(o: any) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o: any) { return typeof o; } : function (o: any) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _classCallCheck(instance: any, Constructor: any) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target: any, props: any) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor: any, protoProps: any, staticProps: any) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg: any) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input: any, hint: any) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
var BufferSource = /*#__PURE__*/function () {
  function BufferSource(buffer: any) {
    _classCallCheck(this, BufferSource);
    this._buffer = buffer;
    this.size = buffer.length;
  }
  // @ts-expect-error TS(2554): Expected 3 arguments, but got 2.
  _createClass(BufferSource, [{
    key: "slice",
    value: function slice(start: any, end: any) {
      var value = this._buffer.slice(start, end);
      value.size = value.length;
      var done = end >= this.size;
      return Promise.resolve({
        value: value,
        done: done
      });
    }
  }, {
    key: "close",
    value: function close() {}
  }]);
  return BufferSource;
}();
export { BufferSource as default };