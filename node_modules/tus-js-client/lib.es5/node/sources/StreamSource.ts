"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
// @ts-expect-error TS(7023): '_typeof' implicitly has return type 'any' because... Remove this comment to see the full error message
function _typeof(o: any) {
  "@babel/helpers - typeof";

  // @ts-expect-error TS(2630): Cannot assign to '_typeof' because it is a functio... Remove this comment to see the full error message
  return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o: any) {
    return typeof o;
  } : function (o: any) {
    return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o;
  }, _typeof(o);
}
function _regeneratorRuntime() {
  "use strict";

  /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */
  // @ts-expect-error TS(2630): Cannot assign to '_regeneratorRuntime' because it ... Remove this comment to see the full error message
  _regeneratorRuntime = function _regeneratorRuntime() {
    return e;
  };
  var t: any,
    e = {},
    r = Object.prototype,
    n = r.hasOwnProperty,
    o = Object.defineProperty || function (t, e, r) {
      // @ts-expect-error TS(7053): Element implicitly has an 'any' type because expre... Remove this comment to see the full error message
      t[e] = r.value;
    },
    i = "function" == typeof Symbol ? Symbol : {},
    // @ts-expect-error TS(2339): Property 'iterator' does not exist on type '{}'.
    a = i.iterator || "@@iterator",
    // @ts-expect-error TS(2339): Property 'asyncIterator' does not exist on type '{... Remove this comment to see the full error message
    c = i.asyncIterator || "@@asyncIterator",
    // @ts-expect-error TS(2339): Property 'toStringTag' does not exist on type '{}'... Remove this comment to see the full error message
    u = i.toStringTag || "@@toStringTag";
  function define(t: any, e: any, r: any) {
    return Object.defineProperty(t, e, {
      value: r,
      enumerable: !0,
      configurable: !0,
      writable: !0
    }), t[e];
  }
  try {
    // @ts-expect-error TS(2554): Expected 3 arguments, but got 2.
    define({}, "");
  } catch (t) {
    // @ts-expect-error TS(2630): Cannot assign to 'define' because it is a function... Remove this comment to see the full error message
    define = function define(t: any, e: any, r: any) {
      return t[e] = r;
    };
  }
  function wrap(t: any, e: any, r: any, n: any) {
    var i = e && e.prototype instanceof Generator ? e : Generator,
      a = Object.create(i.prototype),
      // @ts-expect-error TS(7009): 'new' expression, whose target lacks a construct s... Remove this comment to see the full error message
      c = new Context(n || []);
    return o(a, "_invoke", {
      value: makeInvokeMethod(t, r, c)
    }), a;
  }
  function tryCatch(t: any, e: any, r: any) {
    try {
      return {
        type: "normal",
        arg: t.call(e, r)
      };
    } catch (t) {
      return {
        type: "throw",
        arg: t
      };
    }
  }
  // @ts-expect-error TS(2339): Property 'wrap' does not exist on type '{}'.
  e.wrap = wrap;
  var h = "suspendedStart",
    l = "suspendedYield",
    f = "executing",
    s = "completed",
    y = {};
  function Generator() {}
  function GeneratorFunction() {}
  function GeneratorFunctionPrototype() {}
  var p = {};
  define(p, a, function () {
    return this;
  });
  var d = Object.getPrototypeOf,
    v = d && d(d(values([])));
  v && v !== r && n.call(v, a) && (p = v);
  var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p);
  function defineIteratorMethods(t: any) {
    ["next", "throw", "return"].forEach(function (e) {
      define(t, e, function (t: any) {
        return this._invoke(e, t);
      });
    });
  }
  function AsyncIterator(t: any, e: any) {
    function invoke(r: any, o: any, i: any, a: any) {
      var c = tryCatch(t[r], t, o);
      if ("throw" !== c.type) {
        var u = c.arg,
          h = u.value;
        return h && "object" == _typeof(h) && n.call(h, "__await") ? e.resolve(h.__await).then(function (t: any) {
          invoke("next", t, i, a);
        }, function (t: any) {
          invoke("throw", t, i, a);
        }) : e.resolve(h).then(function (t: any) {
          u.value = t, i(u);
        }, function (t: any) {
          return invoke("throw", t, i, a);
        });
      }
      a(c.arg);
    }
    var r: any;
    o(this, "_invoke", {
      value: function value(t: any, n: any) {
        function callInvokeWithMethodAndArg() {
          return new e(function (e: any, r: any) {
            invoke(t, n, e, r);
          });
        }
        return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();
      }
    });
  }
  function makeInvokeMethod(e: any, r: any, n: any) {
    var o = h;
    return function (i: any, a: any) {
      if (o === f) throw new Error("Generator is already running");
      if (o === s) {
        if ("throw" === i) throw a;
        return {
          value: t,
          done: !0
        };
      }
      for (n.method = i, n.arg = a;;) {
        var c = n.delegate;
        if (c) {
          var u = maybeInvokeDelegate(c, n);
          if (u) {
            if (u === y) continue;
            return u;
          }
        }
        if ("next" === n.method) n.sent = n._sent = n.arg;else if ("throw" === n.method) {
          if (o === h) throw (o = s, n.arg);
          n.dispatchException(n.arg);
        } else "return" === n.method && n.abrupt("return", n.arg);
        o = f;
        var p = tryCatch(e, r, n);
        if ("normal" === p.type) {
          if (o = n.done ? s : l, p.arg === y) continue;
          return {
            value: p.arg,
            done: n.done
          };
        }
        "throw" === p.type && (o = s, n.method = "throw", n.arg = p.arg);
      }
    };
  }
  // @ts-expect-error TS(7023): 'maybeInvokeDelegate' implicitly has return type '... Remove this comment to see the full error message
  function maybeInvokeDelegate(e: any, r: any) {
    var n = r.method,
      o = e.iterator[n];
    if (o === t) return r.delegate = null, "throw" === n && e.iterator["return"] && (r.method = "return", r.arg = t, maybeInvokeDelegate(e, r), "throw" === r.method) || "return" !== n && (r.method = "throw", r.arg = new TypeError("The iterator does not provide a '" + n + "' method")), y;
    var i = tryCatch(o, e.iterator, r.arg);
    if ("throw" === i.type) return r.method = "throw", r.arg = i.arg, r.delegate = null, y;
    var a = i.arg;
    return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, "return" !== r.method && (r.method = "next", r.arg = t), r.delegate = null, y) : a : (r.method = "throw", r.arg = new TypeError("iterator result is not an object"), r.delegate = null, y);
  }
  function pushTryEntry(t: any) {
    var e = {
      tryLoc: t[0]
    };
    // @ts-expect-error TS(2339): Property 'catchLoc' does not exist on type '{ tryL... Remove this comment to see the full error message
    1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e);
  }
  function resetTryEntry(t: any) {
    var e = t.completion || {};
    e.type = "normal", delete e.arg, t.completion = e;
  }
  function Context(t: any) {
    this.tryEntries = [{
      tryLoc: "root"
    }], t.forEach(pushTryEntry, this), this.reset(!0);
  }
  function values(e: any) {
    if (e || "" === e) {
      var r = e[a];
      if (r) return r.call(e);
      if ("function" == typeof e.next) return e;
      if (!isNaN(e.length)) {
        var o = -1,
          // @ts-expect-error TS(7023): 'next' implicitly has return type 'any' because it... Remove this comment to see the full error message
          i = function next() {
            // @ts-expect-error TS(2339): Property 'value' does not exist on type '() => any... Remove this comment to see the full error message
            for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next;
            // @ts-expect-error TS(2339): Property 'value' does not exist on type '() => any... Remove this comment to see the full error message
            return next.value = t, next.done = !0, next;
          };
        // @ts-expect-error TS(2339): Property 'next' does not exist on type '() => any'... Remove this comment to see the full error message
        return i.next = i;
      }
    }
    throw new TypeError(_typeof(e) + " is not iterable");
  }
  return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, "constructor", {
    value: GeneratorFunctionPrototype,
    configurable: !0
  }), o(GeneratorFunctionPrototype, "constructor", {
    value: GeneratorFunction,
    configurable: !0
  // @ts-expect-error TS(2339): Property 'isGeneratorFunction' does not exist on t... Remove this comment to see the full error message
  }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, "GeneratorFunction"), e.isGeneratorFunction = function (t: any) {
    var e = "function" == typeof t && t.constructor;
    return !!e && (e === GeneratorFunction || "GeneratorFunction" === (e.displayName || e.name));
  // @ts-expect-error TS(2339): Property 'mark' does not exist on type '{}'.
  }, e.mark = function (t: any) {
    return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, "GeneratorFunction")), t.prototype = Object.create(g), t;
  // @ts-expect-error TS(2339): Property 'awrap' does not exist on type '{}'.
  }, e.awrap = function (t: any) {
    return {
      __await: t
    };
  }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () {
    return this;
  // @ts-expect-error TS(2339): Property 'AsyncIterator' does not exist on type '{... Remove this comment to see the full error message
  }), e.AsyncIterator = AsyncIterator, e.async = function (t: any, r: any, n: any, o: any, i: any) {
    void 0 === i && (i = Promise);
    // @ts-expect-error TS(7009): 'new' expression, whose target lacks a construct s... Remove this comment to see the full error message
    var a = new AsyncIterator(wrap(t, r, n, o), i);
    // @ts-expect-error TS(2339): Property 'isGeneratorFunction' does not exist on t... Remove this comment to see the full error message
    return e.isGeneratorFunction(r) ? a : a.next().then(function (t: any) {
      return t.done ? t.value : a.next();
    });
  }, defineIteratorMethods(g), define(g, u, "Generator"), define(g, a, function () {
    return this;
  }), define(g, "toString", function () {
    return "[object Generator]";
  // @ts-expect-error TS(2339): Property 'keys' does not exist on type '{}'.
  }), e.keys = function (t: any) {
    var e = Object(t),
      r: any = [];
    for (var n in e) r.push(n);
    // @ts-expect-error TS(7023): 'next' implicitly has return type 'any' because it... Remove this comment to see the full error message
    return r.reverse(), function next() {
      for (; r.length;) {
        var t = r.pop();
        // @ts-expect-error TS(2339): Property 'value' does not exist on type '() => any... Remove this comment to see the full error message
        if (t in e) return next.value = t, next.done = !1, next;
      }
      // @ts-expect-error TS(2339): Property 'done' does not exist on type '() => any'... Remove this comment to see the full error message
      return next.done = !0, next;
    };
  // @ts-expect-error TS(2339): Property 'values' does not exist on type '{}'.
  }, e.values = values, Context.prototype = {
    constructor: Context,
    reset: function reset(e: any) {
      if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = "next", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) "t" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t);
    },
    stop: function stop() {
      this.done = !0;
      var t = this.tryEntries[0].completion;
      if ("throw" === t.type) throw t.arg;
      return this.rval;
    },
    dispatchException: function dispatchException(e: any) {
      if (this.done) throw e;
      var r = this;
      function handle(n: any, o: any) {
        return a.type = "throw", a.arg = e, r.next = n, o && (r.method = "next", r.arg = t), !!o;
      }
      for (var o = this.tryEntries.length - 1; o >= 0; --o) {
        var i = this.tryEntries[o],
          a = i.completion;
        // @ts-expect-error TS(2554): Expected 2 arguments, but got 1.
        if ("root" === i.tryLoc) return handle("end");
        if (i.tryLoc <= this.prev) {
          var c = n.call(i, "catchLoc"),
            u = n.call(i, "finallyLoc");
          if (c && u) {
            if (this.prev < i.catchLoc) return handle(i.catchLoc, !0);
            // @ts-expect-error TS(2554): Expected 2 arguments, but got 1.
            if (this.prev < i.finallyLoc) return handle(i.finallyLoc);
          } else if (c) {
            if (this.prev < i.catchLoc) return handle(i.catchLoc, !0);
          } else {
            if (!u) throw new Error("try statement without catch or finally");
            // @ts-expect-error TS(2554): Expected 2 arguments, but got 1.
            if (this.prev < i.finallyLoc) return handle(i.finallyLoc);
          }
        }
      }
    },
    abrupt: function abrupt(t: any, e: any) {
      for (var r = this.tryEntries.length - 1; r >= 0; --r) {
        var o = this.tryEntries[r];
        if (o.tryLoc <= this.prev && n.call(o, "finallyLoc") && this.prev < o.finallyLoc) {
          var i = o;
          break;
        }
      }
      i && ("break" === t || "continue" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null);
      var a = i ? i.completion : {};
      return a.type = t, a.arg = e, i ? (this.method = "next", this.next = i.finallyLoc, y) : this.complete(a);
    },
    complete: function complete(t: any, e: any) {
      if ("throw" === t.type) throw t.arg;
      return "break" === t.type || "continue" === t.type ? this.next = t.arg : "return" === t.type ? (this.rval = this.arg = t.arg, this.method = "return", this.next = "end") : "normal" === t.type && e && (this.next = e), y;
    },
    finish: function finish(t: any) {
      for (var e = this.tryEntries.length - 1; e >= 0; --e) {
        var r = this.tryEntries[e];
        if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y;
      }
    },
    "catch": function _catch(t: any) {
      for (var e = this.tryEntries.length - 1; e >= 0; --e) {
        var r = this.tryEntries[e];
        if (r.tryLoc === t) {
          var n = r.completion;
          if ("throw" === n.type) {
            var o = n.arg;
            resetTryEntry(r);
          }
          return o;
        }
      }
      throw new Error("illegal catch attempt");
    },
    delegateYield: function delegateYield(e: any, r: any, n: any) {
      return this.delegate = {
        iterator: values(e),
        resultName: r,
        nextLoc: n
      }, "next" === this.method && (this.arg = t), y;
    }
  }, e;
}
function _classCallCheck(instance: any, Constructor: any) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
function _defineProperties(target: any, props: any) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
  }
}
function _createClass(Constructor: any, protoProps: any, staticProps: any) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  Object.defineProperty(Constructor, "prototype", {
    writable: false
  });
  return Constructor;
}
function _toPropertyKey(arg: any) {
  var key = _toPrimitive(arg, "string");
  return _typeof(key) === "symbol" ? key : String(key);
}
function _toPrimitive(input: any, hint: any) {
  if (_typeof(input) !== "object" || input === null) return input;
  var prim = input[Symbol.toPrimitive];
  if (prim !== undefined) {
    var res = prim.call(input, hint || "default");
    if (_typeof(res) !== "object") return res;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (hint === "string" ? String : Number)(input);
}
function asyncGeneratorStep(gen: any, resolve: any, reject: any, _next: any, _throw: any, key: any, arg: any) {
  try {
    var info = gen[key](arg);
    var value = info.value;
  } catch (error) {
    reject(error);
    return;
  }
  if (info.done) {
    resolve(value);
  } else {
    Promise.resolve(value).then(_next, _throw);
  }
}
function _asyncToGenerator(fn: any) {
  return function () {
    var self = this,
      args = arguments;
    return new Promise(function (resolve, reject) {
      var gen = fn.apply(self, args);
      function _next(value: any) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
      }
      function _throw(err: any) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
      }
      _next(undefined);
    });
  };
}
/**
 * readChunk reads a chunk with the given size from the given
 * stream. It will wait until enough data is available to satisfy
 * the size requirement before resolving.
 * Only if the stream ends, the function may resolve with a buffer
 * smaller than the size argument.
 * Note that we rely on the stream behaving as Node.js documents:
 * https://nodejs.org/api/stream.html#readablereadsize
 */
function readChunk(_x: any, _x2: any) {
  return _readChunk.apply(this, arguments);
}
/**
 * StreamSource provides an interface to obtain slices of a Readable stream for
 * various ranges.
 * It will buffer read data, to allow for following pattern:
 * - Call slice(startA, endA) will buffer the data of the requested range
 * - Call slice(startB, endB) will return data from the buffer if startA <= startB <= endA.
 *   If endB > endA, it will also consume new data from the stream.
 * Note that it is forbidden to call with startB < startA or startB > endA. In other words,
 * the slice calls cannot seek back and must not skip data from the stream.
 */
function _readChunk() {
  // @ts-expect-error TS(2630): Cannot assign to '_readChunk' because it is a func... Remove this comment to see the full error message
  _readChunk = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(stream: any, size: any) {
    // @ts-expect-error TS(2339): Property 'wrap' does not exist on type '{}'.
    return _regeneratorRuntime().wrap(function _callee2$(_context2: any) {
      while (1) switch (_context2.prev = _context2.next) {
        case 0:
          return _context2.abrupt("return", new Promise(function (resolve, reject) {
            var onError = function onError(err: any) {
              stream.off('readable', onReadable);
              reject(err);
            };
            var onReadable = function onReadable() {
              // TODO: Node requires size to be less than 1GB. Add a validation for that
              var chunk = stream.read(size);
              if (chunk !== null) {
                stream.off('error', onError);
                stream.off('readable', onReadable);
                resolve(chunk);
              }
            };
            stream.once('error', onError);
            stream.on('readable', onReadable);
          }));
        case 1:
        case "end":
          return _context2.stop();
      }
    }, _callee2);
  }));
  return _readChunk.apply(this, arguments);
}
var StreamSource = /*#__PURE__*/function () {
  function StreamSource(stream: any) {
    var _this = this;
    _classCallCheck(this, StreamSource);
    this._stream = stream;

    // Setting the size to null indicates that we have no calculation available
    // for how much data this stream will emit requiring the user to specify
    // it manually (see the `uploadSize` option).
    this.size = null;
    this._buf = Buffer.alloc(0);
    this._bufPos = 0;
    this._ended = false;
    this._error = null;
    stream.pause();
    stream.on('end', function () {
      _this._ended = true;
    });
    stream.on('error', function (err: any) {
      _this._error = err;
    });
  }
  // @ts-expect-error TS(2554): Expected 3 arguments, but got 2.
  _createClass(StreamSource, [{
    key: "slice",
    value: function () {
      // @ts-expect-error TS(2339): Property 'mark' does not exist on type '{}'.
      var _slice = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(start: any, end: any) {
        var returnBuffer: any, bufStart, bufEnd, requestedSize, newChunk;
        // @ts-expect-error TS(2339): Property 'wrap' does not exist on type '{}'.
        return _regeneratorRuntime().wrap(function _callee$(_context: any) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              if (!(start < this._bufPos)) {
                _context.next = 2;
                break;
              }
              throw new Error('cannot slice from position which we already seeked away');
            case 2:
              if (!(start > this._bufPos + this._buf.length)) {
                _context.next = 4;
                break;
              }
              throw new Error('slice start is outside of buffer (currently not implemented)');
            case 4:
              if (!this._error) {
                _context.next = 6;
                break;
              }
              throw this._error;
            case 6:
              // Always attempt to drain the buffer first, even if this means that we
              // return less data than the caller requested.
              if (start < this._bufPos + this._buf.length) {
                bufStart = start - this._bufPos;
                bufEnd = Math.min(this._buf.length, end - this._bufPos);
                returnBuffer = this._buf.slice(bufStart, bufEnd);
              } else {
                returnBuffer = Buffer.alloc(0);
              }

              // If the stream has ended already, read calls would not finish, so return early here.
              if (!this._ended) {
                _context.next = 10;
                break;
              }
              returnBuffer.size = returnBuffer.length;
              return _context.abrupt("return", {
                value: returnBuffer,
                done: true
              });
            case 10:
              // If we could not satisfy the slice request from the buffer only, read more data from
              // the stream and add it to the buffer.
              requestedSize = end - start;
              if (!(requestedSize > returnBuffer.length)) {
                _context.next = 16;
                break;
              }
              _context.next = 14;
              return readChunk(this._stream, requestedSize - returnBuffer.length);
            case 14:
              newChunk = _context.sent;
              // Append the new chunk to the buffer
              returnBuffer = Buffer.concat([returnBuffer, newChunk]);
            case 16:
              // Important: Store the read data, so consecutive slice calls can access the same data.
              this._buf = returnBuffer;
              this._bufPos = start;
              returnBuffer.size = returnBuffer.length;
              return _context.abrupt("return", {
                value: returnBuffer,
                done: this._ended
              });
            case 20:
            case "end":
              return _context.stop();
          }
        }, _callee, this);
      }));
      function slice(_x3: any, _x4: any) {
        return _slice.apply(this, arguments);
      }
      return slice;
    }()
  }, {
    key: "close",
    value: function close() {
      this._stream.destroy();
    }
  }]);
  return StreamSource;
}();
exports.default = StreamSource;