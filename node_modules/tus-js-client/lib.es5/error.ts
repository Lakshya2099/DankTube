"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
// @ts-expect-error TS(2393): Duplicate function implementation.
function _typeof(o: any) {
  "@babel/helpers - typeof";

  // @ts-expect-error TS(2630): Cannot assign to '_typeof' because it is a functio... Remove this comment to see the full error message
  return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o: any) {
    return typeof o;
  } : function (o: any) {
    return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o;
  }, _typeof(o);
}
// @ts-expect-error TS(2393): Duplicate function implementation.
function _defineProperties(target: any, props: any) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
  }
}
// @ts-expect-error TS(2393): Duplicate function implementation.
function _createClass(Constructor: any, protoProps: any, staticProps: any) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  Object.defineProperty(Constructor, "prototype", {
    writable: false
  });
  return Constructor;
}
// @ts-expect-error TS(2393): Duplicate function implementation.
function _toPropertyKey(arg: any) {
  var key = _toPrimitive(arg, "string");
  return _typeof(key) === "symbol" ? key : String(key);
}
// @ts-expect-error TS(2393): Duplicate function implementation.
function _toPrimitive(input: any, hint: any) {
  if (_typeof(input) !== "object" || input === null) return input;
  var prim = input[Symbol.toPrimitive];
  if (prim !== undefined) {
    var res = prim.call(input, hint || "default");
    if (_typeof(res) !== "object") return res;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (hint === "string" ? String : Number)(input);
}
// @ts-expect-error TS(2393): Duplicate function implementation.
function _classCallCheck(instance: any, Constructor: any) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
// @ts-expect-error TS(2393): Duplicate function implementation.
function _inherits(subClass: any, superClass: any) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }
  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      writable: true,
      configurable: true
    }
  });
  Object.defineProperty(subClass, "prototype", {
    writable: false
  });
  if (superClass) _setPrototypeOf(subClass, superClass);
}
// @ts-expect-error TS(2393): Duplicate function implementation.
function _createSuper(Derived: any) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf(Derived),
      result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn(this, result);
  };
}
// @ts-expect-error TS(2393): Duplicate function implementation.
function _possibleConstructorReturn(self: any, call: any) {
  if (call && (_typeof(call) === "object" || typeof call === "function")) {
    return call;
  } else if (call !== void 0) {
    throw new TypeError("Derived constructors may only return object or undefined");
  }
  return _assertThisInitialized(self);
}
// @ts-expect-error TS(2393): Duplicate function implementation.
function _assertThisInitialized(self: any) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }
  return self;
}
// @ts-expect-error TS(7023): '_wrapNativeSuper' implicitly has return type 'any... Remove this comment to see the full error message
function _wrapNativeSuper(Class: any) {
  var _cache = typeof Map === "function" ? new Map() : undefined;
  // @ts-expect-error TS(2630): Cannot assign to '_wrapNativeSuper' because it is ... Remove this comment to see the full error message
  _wrapNativeSuper = function _wrapNativeSuper(Class: any) {
    if (Class === null || !_isNativeFunction(Class)) return Class;
    if (typeof Class !== "function") {
      throw new TypeError("Super expression must either be null or a function");
    }
    if (typeof _cache !== "undefined") {
      if (_cache.has(Class)) return _cache.get(Class);
      _cache.set(Class, Wrapper);
    }
    function Wrapper() {
      return _construct(Class, arguments, _getPrototypeOf(this).constructor);
    }
    Wrapper.prototype = Object.create(Class.prototype, {
      constructor: {
        value: Wrapper,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
    return _setPrototypeOf(Wrapper, Class);
  };
  return _wrapNativeSuper(Class);
}
function _construct(Parent: any, args: any, Class: any) {
  if (_isNativeReflectConstruct()) {
    // @ts-expect-error TS(2630): Cannot assign to '_construct' because it is a func... Remove this comment to see the full error message
    _construct = Reflect.construct.bind();
  } else {
    // @ts-expect-error TS(2630): Cannot assign to '_construct' because it is a func... Remove this comment to see the full error message
    _construct = function _construct(Parent: any, args: any, Class: any) {
      // @ts-expect-error TS(7005): Variable 'a' implicitly has an 'any[]' type.
      var a = [null];
      a.push.apply(a, args);
      var Constructor = Function.bind.apply(Parent, a);
      var instance = new Constructor();
      if (Class) _setPrototypeOf(instance, Class.prototype);
      return instance;
    };
  }
  return _construct.apply(null, arguments);
}
// @ts-expect-error TS(2393): Duplicate function implementation.
function _isNativeReflectConstruct() {
  if (typeof Reflect === "undefined" || !Reflect.construct) return false;
  // @ts-expect-error TS(2339): Property 'sham' does not exist on type '(target: F... Remove this comment to see the full error message
  if (Reflect.construct.sham) return false;
  if (typeof Proxy === "function") return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
    return true;
  } catch (e) {
    return false;
  }
}
function _isNativeFunction(fn: any) {
  return Function.toString.call(fn).indexOf("[native code]") !== -1;
}
// @ts-expect-error TS(2393): Duplicate function implementation.
function _setPrototypeOf(o: any, p: any) {
  // @ts-expect-error TS(2630): Cannot assign to '_setPrototypeOf' because it is a... Remove this comment to see the full error message
  _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o: any, p: any) {
    o.__proto__ = p;
    return o;
  };
  return _setPrototypeOf(o, p);
}
// @ts-expect-error TS(2393): Duplicate function implementation.
function _getPrototypeOf(o: any) {
  // @ts-expect-error TS(2630): Cannot assign to '_getPrototypeOf' because it is a... Remove this comment to see the full error message
  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o: any) {
    return o.__proto__ || Object.getPrototypeOf(o);
  };
  return _getPrototypeOf(o);
}
var DetailedError = /*#__PURE__*/function (_Error) {
  _inherits(DetailedError, _Error);
  var _super = _createSuper(DetailedError);
  function DetailedError(message: any) {
    var _this;
    var causingErr = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
    var req = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
    var res = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;
    _classCallCheck(this, DetailedError);
    _this = _super.call(this, message);
    _this.originalRequest = req;
    _this.originalResponse = res;
    _this.causingError = causingErr;
    if (causingErr != null) {
      message += ", caused by ".concat(causingErr.toString());
    }
    if (req != null) {
      var requestId = req.getHeader('X-Request-ID') || 'n/a';
      var method = req.getMethod();
      var url = req.getURL();
      var status = res ? res.getStatus() : 'n/a';
      var body = res ? res.getBody() || '' : 'n/a';
      message += ", originated from request (method: ".concat(method, ", url: ").concat(url, ", response code: ").concat(status, ", response text: ").concat(body, ", request id: ").concat(requestId, ")");
    }
    _this.message = message;
    return _this;
  }
  // @ts-expect-error TS(2554): Expected 3 arguments, but got 1.
  return _createClass(DetailedError);
}( /*#__PURE__*/_wrapNativeSuper(Error));
// @ts-expect-error TS(2451): Cannot redeclare block-scoped variable '_default'.
var _default = DetailedError;
exports.default = _default;